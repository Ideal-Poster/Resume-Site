require 'rails_helper'
require 'database_cleaner'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProjectsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { title: "First Project", description: "This is my first website" }
  }

  let(:invalid_attributes) {
    { title: "First Project", description:"" }
  }
  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # ProjectsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let(:project_save) { Project.create! valid_attributes }

  describe "GET #index" do
    it "assigns all projects as @projects" do
      get :index, session: valid_session
      expect(assigns(:projects)).to eq([project_save])
      expect(response).to render_template(:index)
    end
  end

  describe "GET #show" do
    it "assigns the requested project as @project" do
      get :show, id: project_save.id, session: valid_session
      expect(assigns(:project)).to eq(project_save)
      expect(response).to render_template(:show)
    end
  end

  describe "GET #new" do
    it "assigns a new project as @project" do
      get :new, session: valid_session
      expect(assigns(:project)).to be_a_new(Project)
      expect(response).to render_template(:new)
    end
  end

  describe "GET #edit" do
    it "assigns the requested project as @project" do
      get :edit, id: project_save.id, session: valid_session
      expect(assigns(:project)).to eq(project_save)
    end
  end

  describe "POST create" do
    it "creates a project" do
      expect(Project).to receive(:new)
        .with(valid_attributes)
        .and_return(project_save)
      post :create, project: valid_attributes
      expect(response).to redirect_to(projects_path)
    end

    it "goes back to the form on failure" do
      post :create, project: invalid_attributes
      expect(response).to render_template(:new)
      expect(assigns(:project)).to be_present
    end

    it "fails create gracefully" do
      expect(Project).to receive(:new).and_return(Project.create(invalid_attributes))
      post :create, project: invalid_attributes
      expect(response).to render_template(:new)
    end

end

describe "PATCH update" do
  it "fails update gracefully" do
    sample = Project.create!(valid_attributes)
    expect(sample).to receive(:update_attributes).and_return(false)
    allow(Project).to receive(:find).and_return(sample)
    patch :update, id: sample.id, project: { title: "Fred" }
    expect(response).to render_template(:edit)
  end
end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { title: "Updated Project", description: "Hello. I'm the updated description." }
      }

      it "updates the requested project" do
        put :update, id: project_save.id, project: new_attributes
        project_save.reload
        expect(project_save.title).to eq("Updated Project")
        expect(project_save.description).to eq("Hello. I'm the updated description.")
      end

      it "assigns the requested project as @project" do
        put :update, id: project_save.id, project: valid_attributes
        expect(assigns(:project)).to eq(project_save)
      end

      it "redirects to the project" do
        put :update, id: project_save.to_param, project: valid_attributes, session: valid_session
        expect(response).to redirect_to(project_save)
      end
    end

    context "with invalid params" do
      it "assigns the project as @project" do
        put :update, id: project_save.to_param, project: invalid_attributes, session: valid_session
        expect(assigns(:project)).to eq(project_save)
      end

      it "re-renders the 'edit' template" do
        put :update, id: project_save.to_param, project: invalid_attributes, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested project" do
      project = Project.create! valid_attributes
      expect {
        delete :destroy, id: project.id, session: valid_session
      }.to change(Project, :count).by(-1)
    end

    it "redirects to the projects list" do
      project = Project.create! valid_attributes
      delete :destroy, id: project.id, session: valid_session
      expect(response).to redirect_to(projects_path)
    end
  end

end
